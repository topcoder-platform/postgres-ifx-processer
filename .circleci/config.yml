version: 2
defaults: &defaults
    docker:
            #- image: docker:17.06.1-ce-git
      - image: circleci/python:2.7-stretch-browsers 
install_dependency: &install_dependency
          name: Installation of build and deployment dependencies.
          command: |
            sudo apt-get update
            sudo apt install jq
            sudo pip install awscli --upgrade
            sudo pip install docker-compose
            sudo apt-get install default-jdk --fix-missing
install_deploysuite: &install_deploysuite
          name: Installation of install_deploysuite.
          #Git Clone -change back to v1.3 or latest once counter var is generalized.
          command: |
            git clone --branch master https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript    
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .
            
restore_cache_settings_for_build: &restore_cache_settings_for_build
  key: docker-pg-ifx-notify-{{ checksum "package-lock.json" }}

save_cache_settings: &save_cache_settings
  key: docker-pg-ifx-notify-{{ checksum "package-lock.json" }}
  paths:
    - node_modules


build_steps: &build_steps
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      - restore_cache: *restore_cache_settings_for_build
      - run: docker build -t postgres-ifx-processer:latest .
      - save_cache: *save_cache_settings
      - deploy:
          name: Running MasterScript.
          command: |
            
            ./awsconfiguration.sh ${DEPLOY_ENV}
            source awsenvconf
            #scorecard test consumer remove later
            #./buildenv.sh -e ${DEPLOY_ENV} -b ${LOGICAL_ENV}-${APP_NAME}-consumer_scorecard-deployvar
            #source buildenvvar
            #./master_deploy.sh -d ECS -e ${DEPLOY_ENV} -t latest -s ${GLOBAL_ENV}-global-appvar,${LOGICAL_ENV}-${APP_NAME}-appvar -i postgres-ifx-processer
            
            #scorecard test producer remove later
            #echo "Running Masterscript - deploy postgres-ifx-processer producer"
            #if [ -e ${LOGICAL_ENV}-${APP_NAME}-consumer-deployvar.json ]; then  sudo rm -vf ${LOGICAL_ENV}-${APP_NAME}-consumer-deployvar.json; fi
            #./buildenv.sh -e ${DEPLOY_ENV} -b ${LOGICAL_ENV}-${APP_NAME}-producer_scorecard-deployvar
            #source buildenvvar
            #./master_deploy.sh -d ECS -e ${DEPLOY_ENV} -t latest -s ${GLOBAL_ENV}-global-appvar,${LOGICAL_ENV}-${APP_NAME}-appvar -i postgres-ifx-processer

            # ./buildenv.sh -e ${DEPLOY_ENV} -b ${LOGICAL_ENV}-${APP_NAME}-consumer-deployvar
            #source buildenvvar
            #./master_deploy.sh -d ECS -e ${DEPLOY_ENV} -t latest -s ${GLOBAL_ENV}-global-appvar,${LOGICAL_ENV}-${APP_NAME}-appvar -i postgres-ifx-processer
            

            #echo "Running Masterscript - deploy postgres-ifx-processer producer"
            #if [ -e ${LOGICAL_ENV}-${APP_NAME}-consumer-deployvar.json ]; then  sudo rm -vf ${LOGICAL_ENV}-${APP_NAME}-consumer-deployvar.json; fi
            #./buildenv.sh -e ${DEPLOY_ENV} -b ${LOGICAL_ENV}-${APP_NAME}-producer-deployvar
            #source buildenvvar
            #./master_deploy.sh -d ECS -e ${DEPLOY_ENV} -t latest -s ${GLOBAL_ENV}-global-appvar,${LOGICAL_ENV}-${APP_NAME}-appvar -i postgres-ifx-processer
                          
            #echo "Running Masterscript - deploy postgres-ifx-processer producer_dd"
            #if [ -e ${LOGICAL_ENV}-${APP_NAME}-producer-deployvar.json ]; then  sudo rm -vf ${LOGICAL_ENV}-${APP_NAME}-producer-deployvar.json; fi
            #./buildenv.sh -e ${DEPLOY_ENV} -b ${LOGICAL_ENV}-${APP_NAME}-producer_dd-deployvar
            #source buildenvvar
            #./master_deploy.sh -d ECS -e ${DEPLOY_ENV} -t latest -s ${GLOBAL_ENV}-global-appvar,${LOGICAL_ENV}-${APP_NAME}-appvar -i postgres-ifx-processer

            #echo "Running Masterscript - deploy postgres-ifx-processer reconsiler1"
            #if [ -e ${LOGICAL_ENV}-${APP_NAME}-reconsiler1-deployvar.json ]; then  sudo rm -vf ${LOGICAL_ENV}-${APP_NAME}-reconsiler1-deployvar.json; fi
            #./buildenv.sh -e ${DEPLOY_ENV} -b ${LOGICAL_ENV}-${APP_NAME}-reconsiler1-deployvar
            #source buildenvvar
            #./master_deploy.sh -d ECS -e ${DEPLOY_ENV} -t latest -s ${GLOBAL_ENV}-global-appvar,${LOGICAL_ENV}-${APP_NAME}-appvar -i postgres-ifx-processer

            echo "Running Masterscript - deploy postgres-ifx-processer reconsiler2"
            if [ -e ${LOGICAL_ENV}-${APP_NAME}-reconsiler2-deployvar.json ]; then  sudo rm -vf ${LOGICAL_ENV}-${APP_NAME}-reconsiler1-deployvar.json; fi
            ./buildenv.sh -e ${DEPLOY_ENV} -b ${LOGICAL_ENV}-${APP_NAME}-reconsiler2-deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e ${DEPLOY_ENV} -t latest -s ${GLOBAL_ENV}-global-appvar,${LOGICAL_ENV}-${APP_NAME}-appvar -i postgres-ifx-processer

jobs:
  # Build & Deploy against development backend #
  "build-dev":
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "DEV"
      GLOBAL_ENV: "dev"
      APP_NAME: "postgres-ifx-processer"
    steps: *build_steps
  # Build & Deploy against development backend #
  "build-test":
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      LOGICAL_ENV: "TEST"
      GLOBAL_ENV: "dev"
      APP_NAME: "postgres-ifx-processer"
    steps: *build_steps
  # Build & Deploy against production backend  
  "build-prod":
    <<: *defaults
    environment:
      DEPLOY_ENV: "PROD"
      LOGICAL_ENV: "PROD"
      GLOBAL_ENV: "prod"
      APP_NAME: "postgres-ifx-processer"
    steps: *build_steps
workflows:
  version: 2
  build:
    jobs:
      # Development builds are executed on "develop" branch only.
      - "build-dev":
          context : org-global
          filters:
            branches:
              only:
                - dev
      - "build-test":
          context : org-global
          filters:
            branches:
              only:  
                - dev-test-pg
                - dev-test-pg-rf             
      - "build-prod":
          context : org-global
          filters:
            branches:
              only:
                - master
